name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t dsvw:latest .

  sca:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run pip-audit (SCA)
        run: pip install pip-audit && pip-audit

  sast:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit (SAST)
        run: pip install bandit && bandit -r .

  secrets:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks (Secrets Scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--source . --verbose"

  dast:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t dsvw:latest .

      - name: Run DSVW container
        run: |
         docker run -d -p 3000:8000 --name dsvw dsvw:latest
        # Opcjonalnie: czekaj aż aplikacja się pojawi
         for i in {1..10}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Aplikacja wstała"
            break
          fi
          sleep 2
         done

      - name: Run OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          fail_action: true

